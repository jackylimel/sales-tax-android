apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	defaultConfig {
		minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode rootProject.ext.versionCode
		versionName rootProject.ext.versionName
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

	implementation "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
	implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxJavaVersion}"
	implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxAndroidVersion}"
	implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
	implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofitVersion}"
	implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"
	implementation "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"

	testImplementation project(path: ':testhelper')

	testImplementation "commons-io:commons-io:${rootProject.ext.commonsIoVersion}"
	testImplementation "junit:junit:${rootProject.ext.junitVersion}"
	testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
	testImplementation "org.powermock:powermock-module-junit4:${rootProject.ext.powerMockVersion}"
	testImplementation "org.powermock:powermock-api-mockito2:${rootProject.ext.powerMockVersion}"
}
